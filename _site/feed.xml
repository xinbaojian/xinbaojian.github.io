<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-12-15T11:52:20+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">谷梁祁承</title><subtitle>眼中总有光芒，活成想要的模样。</subtitle><author><name>辛保健</name></author><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/2018/12/15/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-12-15T11:06:20+08:00</published><updated>2018-12-15T11:06:20+08:00</updated><id>http://localhost:4000/2018/12/15/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/2018/12/15/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name>辛保健</name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">SpringBoot-事件监听的4种实现方式</title><link href="http://localhost:4000/2018/12/15/spring-boot-event-listener.html" rel="alternate" type="text/html" title="SpringBoot-事件监听的4种实现方式" /><published>2018-12-15T01:03:15+08:00</published><updated>2018-12-15T01:03:15+08:00</updated><id>http://localhost:4000/2018/12/15/spring-boot-event-listener</id><content type="html" xml:base="http://localhost:4000/2018/12/15/spring-boot-event-listener.html">&lt;p&gt;Web网站如何实现单点登录，账户只能在一处登录。&lt;/p&gt;

&lt;p&gt;首先，我们要判断服务器session集合中是否已经存在了一个session，记录该用户的登录信息。
我们可以通过HttpSessionListener监听器和全局静态map自己实现一个SessionContext。
&lt;!--more--&gt;&lt;/p&gt;

&lt;h3 id=&quot;方式一-手工向applicationcontext中添加监听器&quot;&gt;方式一: 手工向ApplicationContext中添加监听器&lt;/h3&gt;

&lt;p&gt;定义事件&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xinbaojian&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.ApplicationEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * @author xin.bj
 * @program micro-parent
 * @description 黑名单监听器
 * @create 2018-12-14 16:50
 **/&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Data&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BlackListEvent&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BlackListEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;定义监听器&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xinbaojian&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.extern.slf4j.Slf4j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.ApplicationListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * @author xin.bj
 * @program micro-parent
 * @description 黑名单监听器
 * @create 2018-12-14 16:51
 **/&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Slf4j&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BlackListListener&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BlackListEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onApplicationEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BlackListEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;监听到BlackListEvent事件: %s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Do Something&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注册监听器&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xinbaojian&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.ConfigurableApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;xyz.xinbaojian.admin.event.BlackListListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * *@author xin.bj
 * @EnableDiscoveryClient
 * //@EnableDiscoveryClient
 */&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scanBasePackages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xyz.xinbaojian&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ConfigurableApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addApplicationListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BlackListListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;方式二-将监听器装载入spring容器&quot;&gt;方式二: 将监听器装载入spring容器&lt;/h3&gt;

&lt;p&gt;事件定义，定义监听器同上.
注册监听器使用注解 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Component&lt;/code&gt; 把监听器注入到Spring容器中&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xinbaojian&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.extern.slf4j.Slf4j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.ApplicationListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * @author xin.bj
 * @program micro-parent
 * @description 黑名单监听器
 * @create 2018-12-14 16:51
 **/&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Slf4j&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BlackListListener&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BlackListEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onApplicationEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BlackListEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;监听到BlackListEvent事件: %s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Do Something&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;方式三-在applicationproperties中配置监听器&quot;&gt;方式三： 在application.properties中配置监听器&lt;/h3&gt;

&lt;p&gt;事件定义，定义监听器同上.&lt;/p&gt;

&lt;p&gt;注册监听器在application.properties中配置监听&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;context.listener.classes=xyz.xinbaojian.admin.event.BlackListListener
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;方式四-通过eventlistener注解实现事件监听&quot;&gt;方式四： 通过@EventListener注解实现事件监听&lt;/h3&gt;

&lt;p&gt;事件定义，定义监听器同上.&lt;/p&gt;

&lt;p&gt;注册监听器无需实现ApplicationListener接口，使用@EventListener装饰具体方法。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xinbaojian&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.extern.slf4j.Slf4j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.event.EventListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * @author xin.bj
 * @program micro-parent
 * @description 黑名单监听器
 * @create 2018-12-14 16:51
 **/&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Slf4j&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BlackListListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@EventListener&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onApplicationEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BlackListEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;监听到BlackListEvent事件: %s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Do Something&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>xin.bj</name></author><category term="技术" /><category term="Java" /><category term="Spring Boot" /><summary type="html">Web网站如何实现单点登录，账户只能在一处登录。 首先，我们要判断服务器session集合中是否已经存在了一个session，记录该用户的登录信息。 我们可以通过HttpSessionListener监听器和全局静态map自己实现一个SessionContext。 方式一: 手工向ApplicationContext中添加监听器 定义事件 package xyz.xinbaojian.admin.event; import lombok.Data; import org.springframework.context.ApplicationEvent; /** * @author xin.bj * @program micro-parent * @description 黑名单监听器 * @create 2018-12-14 16:50 **/ @Data public class BlackListEvent extends ApplicationEvent { private String address; public BlackListEvent(Object source, String address) { super(source); this.address = address; } } 定义监听器 package xyz.xinbaojian.admin.event; import lombok.extern.slf4j.Slf4j; import org.springframework.context.ApplicationListener; /** * @author xin.bj * @program micro-parent * @description 黑名单监听器 * @create 2018-12-14 16:51 **/ @Slf4j public class BlackListListener implements ApplicationListener&amp;lt;BlackListEvent&amp;gt; { @Override public void onApplicationEvent(BlackListEvent event) { log.info(String.format(&quot;监听到BlackListEvent事件: %s&quot;, event.getAddress())); //Do Something } } 注册监听器 package xyz.xinbaojian; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.ConfigurableApplicationContext; import xyz.xinbaojian.admin.event.BlackListListener; /** * *@author xin.bj * @EnableDiscoveryClient * //@EnableDiscoveryClient */ @SpringBootApplication(scanBasePackages=&quot;xyz.xinbaojian&quot;) public class Application { public static void main(String[] args) { ConfigurableApplicationContext context = SpringApplication.run(Application.class,args); context.addApplicationListener(new BlackListListener()); } } 方式二: 将监听器装载入spring容器 事件定义，定义监听器同上. 注册监听器使用注解 @Component 把监听器注入到Spring容器中 package xyz.xinbaojian.admin.event; import lombok.extern.slf4j.Slf4j; import org.springframework.context.ApplicationListener; import org.springframework.stereotype.Component; /** * @author xin.bj * @program micro-parent * @description 黑名单监听器 * @create 2018-12-14 16:51 **/ @Slf4j @Component public class BlackListListener implements ApplicationListener&amp;lt;BlackListEvent&amp;gt; { @Override public void onApplicationEvent(BlackListEvent event) { log.info(String.format(&quot;监听到BlackListEvent事件: %s&quot;, event.getAddress())); //Do Something } } 方式三： 在application.properties中配置监听器 事件定义，定义监听器同上. 注册监听器在application.properties中配置监听 context.listener.classes=xyz.xinbaojian.admin.event.BlackListListener 方式四： 通过@EventListener注解实现事件监听 事件定义，定义监听器同上. 注册监听器无需实现ApplicationListener接口，使用@EventListener装饰具体方法。 package xyz.xinbaojian.admin.event; import lombok.extern.slf4j.Slf4j; import org.springframework.context.event.EventListener; import org.springframework.stereotype.Component; /** * @author xin.bj * @program micro-parent * @description 黑名单监听器 * @create 2018-12-14 16:51 **/ @Slf4j @Component public class BlackListListener { @EventListener public void onApplicationEvent(BlackListEvent event) { log.info(String.format(&quot;监听到BlackListEvent事件: %s&quot;, event.getAddress())); //Do Something } }</summary></entry><entry><title type="html">随便写写</title><link href="http://localhost:4000/2018/12/14/diary-001.html" rel="alternate" type="text/html" title="随便写写" /><published>2018-12-14T06:16:15+08:00</published><updated>2018-12-14T06:16:15+08:00</updated><id>http://localhost:4000/2018/12/14/diary-001</id><content type="html" xml:base="http://localhost:4000/2018/12/14/diary-001.html">&lt;p&gt;时光如梭啊，上次鼓捣这个博客还是 &lt;code class=&quot;highlighter-rouge&quot;&gt;2017-07-12&lt;/code&gt; 日,今天鼓捣搭建了个&lt;code class=&quot;highlighter-rouge&quot;&gt;Gogs&lt;/code&gt;服务，顺便把服务鼓捣成了下https。&lt;/p&gt;

&lt;p&gt;看到了博客，才想起它啊&lt;/p&gt;

&lt;p&gt;然后就想随便写点什么，上次写博客时还是单身，如今儿子已经&lt;code class=&quot;highlighter-rouge&quot;&gt;33&lt;/code&gt;天了。O(∩_∩)O哈哈~&lt;/p&gt;

&lt;p&gt;虽然现在每天晚上都没睡过好觉了，但是看到他闹夜也是满心的欢喜啊~O(∩_∩)O&lt;/p&gt;</content><author><name>xin.bj</name></author><category term="日记" /><summary type="html">时光如梭啊，上次鼓捣这个博客还是 2017-07-12 日,今天鼓捣搭建了个Gogs服务，顺便把服务鼓捣成了下https。</summary></entry><entry><title type="html">Spring Cloud 使用FeignClient出现Socket Time out 异常</title><link href="http://localhost:4000/2017/07/12/feign-client-close-wait.html" rel="alternate" type="text/html" title="Spring Cloud 使用FeignClient出现Socket Time out 异常" /><published>2017-07-12T19:10:22+08:00</published><updated>2017-07-12T19:10:22+08:00</updated><id>http://localhost:4000/2017/07/12/feign-client-close-wait</id><content type="html" xml:base="http://localhost:4000/2017/07/12/feign-client-close-wait.html">&lt;p&gt;昨天对项目进行压力测试，出现了服务无法调用的问题.&lt;/p&gt;

&lt;p&gt;执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;netstat -np | grep tcp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;发现出现了几乎上千个 CLOSE_WAIT 状态的 TCP 链接。&lt;/p&gt;

&lt;p&gt;收到的解决方案，&lt;/p&gt;

&lt;p&gt;method.setRequestHeader(“Connection”, “close”);&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://doc.nuxeo.com/blog/using-httpclient-properly-avoid-closewait-tcp-connections/&quot;&gt;参考资料&lt;/a&gt;&lt;/p&gt;</content><author><name>Baojian</name></author><category term="技术" /><category term="Java" /><category term="Spring Cloud" /><summary type="html">昨天对项目进行压力测试，出现了服务无法调用的问题.</summary></entry><entry><title type="html">你可能不知道的 git rerere</title><link href="http://localhost:4000/2016/12/23/git-rerere.html" rel="alternate" type="text/html" title="你可能不知道的 git rerere" /><published>2016-12-23T17:00:00+08:00</published><updated>2016-12-23T17:00:00+08:00</updated><id>http://localhost:4000/2016/12/23/git-rerere</id><content type="html" xml:base="http://localhost:4000/2016/12/23/git-rerere.html">&lt;blockquote&gt;
  &lt;p&gt;git rerere&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;rerere-是啥的缩写&quot;&gt;&lt;strong&gt;rerere 是啥的缩写？&lt;/strong&gt;&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rerere &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; reuse recorded resolution
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;rerere是干啥用的&quot;&gt;&lt;strong&gt;rerere是干啥用的？&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;它会让Git记住你是如何解决某个文件的两个版本之间的conflict，这样在下次Git遇到同样的文件在相同的两个版本间发生冲突时，可以自动帮你使用相同的方法解决冲突。&lt;/p&gt;

&lt;h2 id=&quot;如何启用rerere&quot;&gt;&lt;strong&gt;如何启用rerere？&lt;/strong&gt;&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; rerere.enabled &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;p&gt;在repo目录里  &lt;strong&gt;mkdir .git/rr-cache&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;不过推荐前者。&lt;/p&gt;

&lt;h2 id=&quot;能举例说明吗&quot;&gt;&lt;strong&gt;能举例说明吗？&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;参考inline的注释。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git init git-rerere-test
Initialized empty Git repository &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /cygdrive/e/test/git-rerere-test/.git/

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;git-rerere-test

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config rerere.enabled &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 开启rerere功能&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;What fruit do you like?&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; question

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;initial drop&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;master &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root-commit&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; af9fdf9] initial drop
 1 files changed, 1 insertions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 0 deletions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 create mode 100644 question

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 创建test分支&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I like orange&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; question

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;answer in master&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 在master上commit 1次&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;master 3b48cca] answer &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;master
 1 files changed, 1 insertions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 0 deletions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout &lt;span class=&quot;nb&quot;&gt;test
&lt;/span&gt;Switched to branch &lt;span class=&quot;s1&quot;&gt;'test'&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;I like apple&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; question

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;answer in test&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 在test分支上commit 1次制造conflict&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;cda9dab] answer &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test
 &lt;/span&gt;1 files changed, 1 insertions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 0 deletions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout master
Switched to branch &lt;span class=&quot;s1&quot;&gt;'master'&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 在master上merge test&lt;/span&gt;
Auto-merging question
CONFLICT &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;content&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Merge conflict &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;question
Recorded preimage &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'question'&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 多了这一句，表示Git已经开始track你的操作了&lt;/span&gt;
Automatic merge failed&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; fix conflicts and &lt;span class=&quot;k&quot;&gt;then &lt;/span&gt;commit the result.

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim question

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;question &lt;span class=&quot;c&quot;&gt;# 修改文件内容，解决冲突&lt;/span&gt;
What fruit &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;you like?
I like orange &amp;amp; apple

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;
UU question

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add question

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;merge test&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# commit合并&lt;/span&gt;
Recorded resolution &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'question'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Git记录了这次解决冲突的方法&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;master 0b55608] merge &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git reset &lt;span class=&quot;nt&quot;&gt;--hard&lt;/span&gt; HEAD^ &lt;span class=&quot;c&quot;&gt;# 重置这次合并，再次merge看看rerere的效果&lt;/span&gt;
HEAD is now at 3b48cca answer &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;master

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge &lt;span class=&quot;nb&quot;&gt;test
&lt;/span&gt;Auto-merging question
CONFLICT &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;content&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Merge conflict &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;question
Resolved &lt;span class=&quot;s1&quot;&gt;'question'&lt;/span&gt; using previous resolution. &lt;span class=&quot;c&quot;&gt;# Git已经用记录的方法解决冲突了&lt;/span&gt;
Automatic merge failed&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; fix conflicts and &lt;span class=&quot;k&quot;&gt;then &lt;/span&gt;commit the result.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;使用场景&quot;&gt;&lt;strong&gt;使用场景？&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;假设你有如下的history&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;          o---*---o topic
         /
o---o---o---*---o---o master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;***** 表示的commit同时修改了同一个文件的同一块代码。这时你想测试一下两处修改有没有破坏build/功能。你可能会&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout topic
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;结果是生成了如下的历史树：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;          o---*---o---+ topic
         /           /
o---o---o---*---o---o master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你解决了冲突并生成了+这个commit。测试完成后，你继续在topic分支上工作，同时master分支上也有了新的commit。最终，你在topic分支上的工作完成，merge回master分支。你执行了：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout master
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge topic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最终的历史树看起来像这样：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;          o---&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;---o---&lt;/span&gt;+---o---o topic
         /           /         &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
o---o---o---&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;---o---o---o---o---&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# master&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果你的topic分支会存活很长时间，你可能多次从master分支merge到topic进行测试。那么你可能会看到很多+的commit(从master分支到topic的线)，这会让历史树看起来不那么直观。&lt;/p&gt;

&lt;p&gt;其实你还有其他选择，在每次merge完成测试以后，丢弃掉这次merge(但是rerere已经帮你记录了如何解决冲突，不用担心日后再次费劲心思的处理)，继续原来的历史开发。直到最终topic分支完成任务，被merge到master(这时rerere会帮你处理掉merge conflict)，这样你的历史树看起来就像：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;          o---*---o-------o---o topic
         /                     \
o---o---o---*---o---o---o---o---+ master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;查看-conflict&quot;&gt;查看 &lt;strong&gt;conflict&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;rerere帮我自动处理了conflict，但我已经忘了这个文件conflict的时候是啥样子了。。。能看看conflict的时候的样子吗？&lt;/p&gt;

&lt;p&gt;执行&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout --conflict=merge &amp;lt;path&amp;gt;&lt;/code&gt;即可&lt;/p&gt;

&lt;p&gt;更多详情参考 &lt;code class=&quot;highlighter-rouge&quot;&gt;git help rerere&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ruby-china.org/topics/15809&quot;&gt;Git rerere&lt;/a&gt;&lt;/p&gt;</content><author><name>Baojian</name></author><category term="Git" /><summary type="html">git rerere</summary></entry><entry><title type="html">在Mac下安装postgresql</title><link href="http://localhost:4000/2016/12/11/install-postgresql-on-mac.html" rel="alternate" type="text/html" title="在Mac下安装postgresql" /><published>2016-12-11T17:00:00+08:00</published><updated>2016-12-11T17:00:00+08:00</updated><id>http://localhost:4000/2016/12/11/install-postgresql-on-mac</id><content type="html" xml:base="http://localhost:4000/2016/12/11/install-postgresql-on-mac.html">&lt;blockquote&gt;
  &lt;p&gt;postgresql&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;在mac下安装postgresql&quot;&gt;在Mac下安装postgresql&lt;/h2&gt;

&lt;p&gt;用brew 安装postgresql&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;postgresql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后创建工作目录，并相应的赋予权限&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir -p /usr/local/var/postgres
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;初始化数据库文件&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;initdb /usr/local/var/postgres/data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;创建log目录&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;midir -p /usr/local/var/log/postgres
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;指定日志输出并启动。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pg_ctl start &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; /usr/local/var/postgres/data &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; /usr/local/var/postgres/postgres.log start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;停止的话，把后面的start 换成stop 即可.&lt;/p&gt;</content><author><name>Baojian</name></author><category term="Mac" /><category term="Postgresql" /><summary type="html">postgresql</summary></entry><entry><title type="html">自搭Ngrok实现内网穿透</title><link href="http://localhost:4000/2016/12/10/run-ngrok-on-you-own-server.html" rel="alternate" type="text/html" title="自搭Ngrok实现内网穿透" /><published>2016-12-10T00:47:57+08:00</published><updated>2016-12-10T00:47:57+08:00</updated><id>http://localhost:4000/2016/12/10/run-ngrok-on-you-own-server</id><content type="html" xml:base="http://localhost:4000/2016/12/10/run-ngrok-on-you-own-server.html">&lt;blockquote&gt;
  &lt;p&gt;内网穿透&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;一准备工作&quot;&gt;一、准备工作&lt;/h4&gt;

&lt;p&gt;搭建ngrok服务需要在&lt;strong&gt;公网有一台vps&lt;/strong&gt;，需要一个自己的&lt;strong&gt;域名&lt;/strong&gt;。已有域名的，可以建立一个&lt;u&gt;子域名&lt;/u&gt;，用于关联ngrok服务，这样也不会干扰原先域名提供的服务。(不用域名的方式也许可以，但我没有试验过。）&lt;/p&gt;

&lt;p&gt;安装必要的工具&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;build-essential git mercurial
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;二实操步骤&quot;&gt;二、实操步骤&lt;/h4&gt;

&lt;p&gt;我的VPS安装的是 &lt;strong&gt;Ubuntu 16.04.1 LTS&lt;/strong&gt;，并安装了 Golang 1.7(&lt;strong&gt;go version go1.7.1 linux/amd64&lt;/strong&gt;)。Golang是编译ngrokd和ngrok所必须的，建议直接从golang官方下载对应平台的二进制安装包（国内可以从 golangtc.com上下载，速度慢些罢了）。&lt;/p&gt;

&lt;h5 id=&quot;1安装golang&quot;&gt;1、安装Golang&lt;/h5&gt;

&lt;p&gt;下载Golang安装包，&lt;a href=&quot;https://golang.org/dl/&quot;&gt;官网&lt;/a&gt;,&lt;a href=&quot;http://golangtc.com/download&quot;&gt;Golangtc&lt;/a&gt; ,建议选择最新下载，然后解压到 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local&lt;/code&gt;,例如：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; /usr/local &lt;span class=&quot;nt&quot;&gt;-xzf&lt;/span&gt; go&lt;span class=&quot;nv&quot;&gt;$VERSION&lt;/span&gt;.&lt;span class=&quot;nv&quot;&gt;$OS&lt;/span&gt;-&lt;span class=&quot;nv&quot;&gt;$ARCH&lt;/span&gt;.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置环境变量：&lt;/p&gt;

&lt;p&gt;在~/.bashrc 或者 ~/.profile 或者 /etc/profile 中配置如下变量&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#set golang environment&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:/usr/local/go/bin
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/you/go/workspace/path
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt;/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行&lt;code class=&quot;highlighter-rouge&quot;&gt;source ~/.bashrc&lt;/code&gt;  or  &lt;code class=&quot;highlighter-rouge&quot;&gt;source ~/.profile&lt;/code&gt;   or  &lt;code class=&quot;highlighter-rouge&quot;&gt;source /etc/profile&lt;/code&gt;在当前终端重新加载环境变量或者新开一个终端。&lt;/p&gt;

&lt;p&gt;执行&lt;code class=&quot;highlighter-rouge&quot;&gt;go version&lt;/code&gt; 出现如 &lt;code class=&quot;highlighter-rouge&quot;&gt;go version go1.7.1 linux/amd64&lt;/code&gt; 则安转成功。(各系统版本信息不同)&lt;/p&gt;

&lt;h5 id=&quot;2下载ngrok源码&quot;&gt;2、下载Ngrok源码&lt;/h5&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
git clone https://github.com/inconshreveable/ngrok.git
&lt;span class=&quot;nb&quot;&gt;export export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/ngrok
&lt;span class=&quot;c&quot;&gt;# 这里编译Ngrok时需要以Ngrok项目为 GOPATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;3-生成自签名证书&quot;&gt;3、 生成自签名证书&lt;/h5&gt;

&lt;p&gt;使用ngrok.com官方服务时，我们使用的是官方的SSL证书。自建ngrokd服务，我们需要生成自己的证书，并提供携带该证书的ngrok客户端。&lt;/p&gt;

&lt;p&gt;证书生成过程需要一个&lt;strong&gt;NGROK_BASE_DOMAIN&lt;/strong&gt;。 以ngrok官方随机生成的地址693c358d.ngrok.com为例，其NGROK_BASE_DOMAIN就是”ngrok.com”，如果你要 提供服务的地址为”example.tunnel.xinbaojian.me”，那NGROK_BASE_DOMAIN就应该 是”tunnel.xinbaojian.me”。&lt;/p&gt;

&lt;p&gt;Tips:&lt;/p&gt;

&lt;p&gt;​	NGROK_BASE_DOMAIN:&lt;em&gt;顶级域名则为:xinbaojian.me&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;这里我们以NGROK_BASE_DOMAIN为顶级域名为例，生成证书命令如下：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl genrsa &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; base.key 2048
openssl req &lt;span class=&quot;nt&quot;&gt;-new&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x509&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-nodes&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-key&lt;/span&gt; base.key &lt;span class=&quot;nt&quot;&gt;-days&lt;/span&gt; 10000 &lt;span class=&quot;nt&quot;&gt;-subj&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/CN=xinbaojian.me&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; base.pem
openssl genrsa &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; server.key 2048
openssl req &lt;span class=&quot;nt&quot;&gt;-new&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-key&lt;/span&gt; server.key &lt;span class=&quot;nt&quot;&gt;-subj&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/CN=xinbaojian.me&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; server.csr
openssl x509 &lt;span class=&quot;nt&quot;&gt;-req&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; server.csr &lt;span class=&quot;nt&quot;&gt;-CA&lt;/span&gt; base.pem &lt;span class=&quot;nt&quot;&gt;-CAkey&lt;/span&gt; base.key &lt;span class=&quot;nt&quot;&gt;-CAcreateserial&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-days&lt;/span&gt; 10000 &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; server.crt	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行玩上述命令，在ngrok目录就会生成6个文件&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;-rw-rw-r--&lt;/span&gt;  1 baojian baojian 1679 12月  7 12:13 rootCA.key
&lt;span class=&quot;nt&quot;&gt;-rw-rw-r--&lt;/span&gt;  1 baojian baojian 1123 12月  7 12:13 rootCA.pem
&lt;span class=&quot;nt&quot;&gt;-rw-rw-r--&lt;/span&gt;  1 baojian baojian   17 12月  7 12:13 rootCA.srl
&lt;span class=&quot;nt&quot;&gt;-rw-rw-r--&lt;/span&gt;  1 baojian baojian 1005 12月  7 12:13 server.crt
&lt;span class=&quot;nt&quot;&gt;-rw-rw-r--&lt;/span&gt;  1 baojian baojian  903 12月  7 12:13 server.csr
&lt;span class=&quot;nt&quot;&gt;-rw-rw-r--&lt;/span&gt;  1 baojian baojian 1675 12月  7 12:13 server.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ngrok通过bindata将ngrok源码目录下的assets目录（资源文件）打包到可执行文件(ngrokd和ngrok)中 去，assets/client/tls和assets/server/tls下分别存放着用于ngrok和ngrokd的默认证书文件，我们需要将它们替换成我们自己生成的：(&lt;strong&gt;因此这一步务必放在编译可执行文件之前&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;拷贝证书&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;base.pem assets/client/tls/ngrokroot.crt
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;server.crt assets/server/tls/snakeoil.crt
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;server.key assets/server/tls/snakeoil.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;3编译ngrokd-和-ngrok&quot;&gt;3、编译ngrokd 和 ngrok&lt;/h5&gt;

&lt;p&gt;由于众所周知的原因，国内服务器编译前需要替换log4go的地址&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 替换下载源地址&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s#code.google.com/p/log4go#github.com/keepeye/log4go#'&lt;/span&gt; ~/ngrok/src/ngrok/log/logger.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;ngrok&lt;/code&gt;目录下执行如下命令，编译服务端 ngrokd:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make release-server
&lt;span class=&quot;c&quot;&gt;#make server 为编译debug版本	&lt;/span&gt;

bin/go-bindata &lt;span class=&quot;nt&quot;&gt;-nomemcopy&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;assets &lt;span class=&quot;nt&quot;&gt;-tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;release &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;-debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src/ngrok/client/assets/assets_release.go &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        assets/client/…
bin/go-bindata &lt;span class=&quot;nt&quot;&gt;-nomemcopy&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;assets &lt;span class=&quot;nt&quot;&gt;-tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;release &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;-debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src/ngrok/server/assets/assets_release.go &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        assets/server/…
go get &lt;span class=&quot;nt&quot;&gt;-tags&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'release'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; ngrok/…
code.google.com/p/log4go &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;download&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
go &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-tags&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'release'&lt;/span&gt; ngrok/main/ngrokd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;编译成功，编译文件为 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/ngrok/bin/ngrokd&lt;/code&gt;,这就是服务端程序。&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;ngrok&lt;/code&gt;目录下执行如下命令，编译客户端 ngrokd:&lt;/p&gt;

&lt;p&gt;编译客户端之前，先确定客户端执行环境，并更改环境变量，进行跨平台编译，如我的树莓派Ubuntu Mate：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOOS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;linux
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOARCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;arm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;系统(GOOS)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;架构(GOARCH)32位&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;架构(GOARCH)64位&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;linux&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;amd64&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;386&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;windows&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;amd64&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;386&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;darwin&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;amd64&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;386&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;linux&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;arm&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;arm&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make release-client
&lt;span class=&quot;c&quot;&gt;#make client 为编译debug版本&lt;/span&gt;

bin/go-bindata &lt;span class=&quot;nt&quot;&gt;-nomemcopy&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;assets &lt;span class=&quot;nt&quot;&gt;-tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;release &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;-debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src/ngrok/client/assets/assets_release.go &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        assets/client/…
bin/go-bindata &lt;span class=&quot;nt&quot;&gt;-nomemcopy&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;assets &lt;span class=&quot;nt&quot;&gt;-tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;release &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;-debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src/ngrok/server/assets/assets_release.go &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        assets/server/…
go get &lt;span class=&quot;nt&quot;&gt;-tags&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'release'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; ngrok/…
go &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-tags&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'release'&lt;/span&gt; ngrok/main/ngrok
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;编译成功，编译文件为 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/ngrok/bin/linux_arm/ngrok&lt;/code&gt;,这就是服务端程序。(平台名字的文件夹下)&lt;/p&gt;

&lt;p&gt;注意：GOPATH务必为ngrok目录。如：&lt;code class=&quot;highlighter-rouge&quot;&gt;export GOPATH=~/ngrok&lt;/code&gt;,可以执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;go env查看GOPATH路径&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;4设置域名&quot;&gt;4、设置域名&lt;/h5&gt;

&lt;p&gt;域名添加两条A记录&lt;/p&gt;

&lt;p&gt;顶级域名&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* 0.0.0.0
@ 0.0.0.0
www 0.0.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;二级域名&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*.ngrok 0.0.0.0
ngrok 0.0.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;三启动服务&quot;&gt;三、启动服务&lt;/h4&gt;

&lt;h5 id=&quot;启动服务端&quot;&gt;启动服务端&lt;/h5&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./ngrokd &lt;span class=&quot;nt&quot;&gt;-domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xinbaojian.me&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-httpAddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:8080&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-httpsAddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:8081&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;启动客户端&quot;&gt;启动客户端&lt;/h5&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./ngrok &lt;span class=&quot;nt&quot;&gt;-subdomain&lt;/span&gt; testing &lt;span class=&quot;nt&quot;&gt;-config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ngrok.cfg 80
&lt;span class=&quot;c&quot;&gt;# 默认使用http/https 协议&lt;/span&gt;
./ngrok &lt;span class=&quot;nt&quot;&gt;-subdomain&lt;/span&gt; testing &lt;span class=&quot;nt&quot;&gt;-config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ngrok.cfg &lt;span class=&quot;nt&quot;&gt;-proto&lt;/span&gt; tcp 80
&lt;span class=&quot;c&quot;&gt;# 使用tcp协议&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;设置开机启动项&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 编辑rc.load&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vim /etc/rc.load
&lt;span class=&quot;nb&quot;&gt;nohup&lt;/span&gt; /home/baojian/client-ngrok/ngrok &lt;span class=&quot;nt&quot;&gt;-config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/baojian/.ngrok &lt;span class=&quot;nt&quot;&gt;-log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;stdout start ssh git &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /home/baojian/client-ngrok/log/ngrok.log 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;span class=&quot;c&quot;&gt;# 路径要用绝对路径&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;四-配置nginx代理&quot;&gt;四、 配置nginx代理&lt;/h4&gt;

&lt;p&gt;最后一个问题，就是微信公共平台等只支持80端口的，但是我vps的80端口已经被nginx用了，所以ngrok无法再使用80端口，怎么办呢？既然已经有了nginx，那么直接反向代理走起~~，创建一个新的配置文件，输入:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;server_name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;~^(?&amp;lt;subdomain&amp;gt;\w+)\.ngrok\.lylinux\.org$;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;keepalive_timeout&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;proxy_set_header&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Host&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8081&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;proxy_pass_header&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Server;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;proxy_redirect&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;off;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;proxy_pass&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8081&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;access_log&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;off;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;log_not_found&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;off;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;端口号要和上面配置的端口号一致，这样不用输端口号就可以直接使用代理了～～。&lt;/p&gt;

&lt;h4 id=&quot;五映射给局域网其它机器&quot;&gt;五、映射给局域网其它机器&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./ngrok &lt;span class=&quot;nt&quot;&gt;-config&lt;/span&gt; ngrok.cfg &lt;span class=&quot;nt&quot;&gt;-subdomain&lt;/span&gt; 1 192.168.2.53:3000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;启动服务的高级用法：参见参考连接 &lt;a href=&quot;https://imlonghao.com/28.html&quot;&gt;「翻译」ngrok 1.X 配置文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考连接：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.svenbit.com/2014/09/run-ngrok-on-your-own-server/&quot;&gt;Run Ngrok on Your Own Server Using Self-Signed SSL Certificate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tonybai.com/2015/03/14/selfhost-ngrok-service/&quot;&gt;搭建自己的ngrok服务&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://imlonghao.com/28.html&quot;&gt;翻译」ngrok 1.X 配置文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.lylinux.org/ubuntu%E5%AE%89%E8%A3%85ngrok%E5%B9%B6%E4%BD%BF%E7%94%A8nginx%E4%BB%A3%E7%90%86.html&quot;&gt;ubuntu安装ngrok并使用nginx代理&lt;/a&gt;&lt;/p&gt;</content><author><name>Baojian</name></author><category term="Ngrok" /><summary type="html">内网穿透</summary></entry><entry><title type="html">单点登录实现</title><link href="http://localhost:4000/2015/12/08/how-to-single-sign-on.html" rel="alternate" type="text/html" title="单点登录实现" /><published>2015-12-08T18:48:24+08:00</published><updated>2015-12-08T18:48:24+08:00</updated><id>http://localhost:4000/2015/12/08/how-to-single-sign-on</id><content type="html" xml:base="http://localhost:4000/2015/12/08/how-to-single-sign-on.html">&lt;blockquote&gt;
  &lt;p&gt;单点登录&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Web网站如何实现单点登录，账户只能在一处登录。&lt;/p&gt;

&lt;p&gt;首先，我们要判断服务器session集合中是否已经存在了一个session，记录该用户的登录信息。
我们可以通过HttpSessionListener监听器和全局静态map自己实现一个SessionContext。
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;MySessionContext.java&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vcooline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wshop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySessionContext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySessionContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mymap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySessionContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mymap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySessionContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySessionContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AddSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;!= null) {
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;mymap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DelSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;!= null) {
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;mymap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mymap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mymap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;LoginSessionListener.java&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vcooline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wshop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vcooline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wshop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MySessionContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpSessionEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpSessionListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoginSessionListener&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpSessionListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySessionContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MySessionContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MySessionContext&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;是实现&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;的读取和删除增加&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;单例模式&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionCreated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpSessionEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;myc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionDestroyed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpSessionEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;HttpSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;myc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DelSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后再web.xml中添加listener&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;listener&amp;gt;   
    &amp;lt;listener-class&amp;gt;com.vcooline.wshop.listener.LoginSessionListener&amp;lt;/listener-class&amp;gt;   
  &amp;lt;/listener&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;根据sessionId获取Session对象：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String sessionId = request.getSession().getId();

HttpSession session = MySessionContext.getSession(sessionId);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第二步，在登录过滤器中增加一个方法&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private Boolean isLogin(HttpServletRequest request){
	 String sessionId = request.getSession().getId();
     HttpSession session = myc.getSession(sessionId);  
     Map&amp;lt;String,HttpSession&amp;gt; userMap = myc.getMap();
     Admin admin = (Admin)request.getSession().getAttribute(&quot;USER&quot;);
     if(admin == null){
    	 return false;
     }
     if(session != null &amp;amp;&amp;amp; userMap != null){
    	 for (String key : userMap.keySet()) {
    		 if(userMap.get(key) != null){
    			 Admin us = (Admin)userMap.get(key).getAttribute(&quot;USER&quot;);
    			 if(us != null &amp;amp;&amp;amp; us.equals(admin) &amp;amp;&amp;amp; !sessionId.equals(key)){
    				 userMap.get(key).invalidate();
        			 return true;
    			 }
    		 }
    	 }
     }
	return false;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 如果当前Session没有用户对象，不做任何处理，直接放行。
2.如果当前Session包含用户对象，遍历所有Session，找到其它包含当前登录用户信息的Session然后失效它。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Baojian</name></author><category term="技术" /><category term="Java" /><category term="Spring Boot" /><summary type="html">单点登录</summary></entry><entry><title type="html">使用Docker镜像搭建Gitlab服务</title><link href="http://localhost:4000/2015/11/26/use-docker-to-build-gitlab.html" rel="alternate" type="text/html" title="使用Docker镜像搭建Gitlab服务" /><published>2015-11-26T18:57:26+08:00</published><updated>2015-11-26T18:57:26+08:00</updated><id>http://localhost:4000/2015/11/26/use-docker-to-build-gitlab</id><content type="html" xml:base="http://localhost:4000/2015/11/26/use-docker-to-build-gitlab.html">&lt;blockquote&gt;
  &lt;p&gt;Docker搭建Gitlab&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;docker用来隔离应用还是很方便的，一来本身的操作较为简单，二来资源占用也比虚拟机要小得多，三来也较为安全，因为像数据库这样的应用不会再全局暴露端口，同时应用间的通信通过加密和端口转发，更加安全。&lt;/p&gt;

&lt;p&gt;Gitlab是目前比较流行的开源类Github代码管理平台。Gitlab使用Rails开发，使用PostgreSQL或MySQL数据库，Redis做缓存。一般自己搭建私有代码仓库，Gitlab通常是首选。这里简单介绍一下dockerized Gitlab。&lt;/p&gt;

&lt;p&gt;Gitlab的docker镜像早已有人做好了，并且维护相当不错。大家可以前往其GitHub仓库了解该镜像的情况。官方repo的readme中已经有详细的安装配置方案，这里我简单的梳理一下部署流程。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;安装docker&quot;&gt;安装Docker&lt;/h3&gt;

&lt;p&gt;可以使用国内公司DaoCloud提供的服务，Docker官方安装速度很慢。
参考地址：&lt;a href=&quot;http://get.daocloud.io/&quot;&gt;Docker 极速下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;###下载docker-gitlab&lt;/p&gt;

&lt;h4 id=&quot;下载docker-gitlab最新版&quot;&gt;下载docker-gitlab最新版,&lt;/h4&gt;
&lt;p&gt;镜像推荐使用&lt;code class=&quot;highlighter-rouge&quot;&gt;sameersbn/gitlab&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull sameersbn/gitlab:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果你使用了DaoCloud的加速服务，则可以这样下载&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dao pull sameersbn/gitlab:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装postgresql&quot;&gt;安装PostgreSQL&lt;/h3&gt;

&lt;p&gt;Gitlab推荐使用PostgreSQL作为数据库。既然使用了docker，那么我们为何不考虑把所有的组件都用docker包装起来？我们一样可以下载PostgreSQL的镜像完成安装，这种安装更加便捷。&lt;/p&gt;

&lt;h4 id=&quot;下载postgresql镜像&quot;&gt;下载PostgreSQL镜像：&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull sameersbn/postgresql:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果你使用了DaoCloud的加速服务，则可以这样下载&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dao pull sameersbn/postgresql:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后我们要为数据库默认的表空间建立目录以存放数据：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir -p /opt/gitlab/postgresql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里&lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/gitlab/postgresql&lt;/code&gt;部分可以替换成你自己希望建立的地址。&lt;/p&gt;

&lt;p&gt;最后使用以下命令行启动数据库：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --name=gitlab-postgresql -d \
  -e 'DB_NAME=gitlabhq_production' -e 'DB_USER=gitlab' -e 'DB_PASS=password' \
  -v /opt/gitlab/postgresql:/var/lib/postgresql \
  sameersbn/postgresql:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;这里，”-e”选项后面的内容请不要随意变更，这里的配置都是Gitlab默认的数据库配置，如果没有在后面Gitlab镜像启动的设置里面做相应的修改的话，这里的修改会让程序无法正常运行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;安装redis&quot;&gt;安装Redis&lt;/h3&gt;

&lt;p&gt;同样，我们可以使用docker来安装Redis：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull sameersbn/redis:latest
or
dao pull sameersbn/redis:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;redis映射目录&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir -p /opt/gitlab/redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后启动它:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --name gitlab-redis -d \
    --volume /opt/gitlab/redis:/var/lib/redis \
    sameersbn/redis:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;启动gitlab&quot;&gt;启动gitlab&lt;/h3&gt;

&lt;p&gt;在最终启动Gitlab之前，我们还需要为Gitlab创建一个目录用来存放提交上来的代码，docker-gitlab内部使用&lt;code class=&quot;highlighter-rouge&quot;&gt;/srv/docker/gitlab/gitlab&lt;/code&gt;这个目录存放代码，我们在容器外部创建一个目录然后在启动的时候挂载到这个路径即可：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir -p /opt/gitlab/data
mkdir -p /opt/gitlab/backups
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在完成上面所有的步骤以后，我们可以用以下命令启动Gitlab：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --name gitlab -d \
    --link postgresql:postgresql --link redis:redisio \
    --publish 10022:22 --publish 10080:80 \
    --env 'GITLAB_PORT=10080' --env 'GITLAB_SSH_PORT=10022' \
    --env 'GITLAB_SECRETS_DB_KEY_BASE=long-and-random-alpha-numeric-string' \
	-e 'GITLAB_HOST=192.168.1.166' \
	-e 'SMTP_ENABLED=true' \
	-e 'SMTP_DOMAIN=www.126.com' \
	-e 'SMTP_HOST=smtp.126.com' \
	-e 'SMTP_PORT=25' \
	-e 'SMTP_STARTTLS=false' \
	-e 'SMTP_USER=you_email' \
	-e 'SMTP_PASS=you_email_password' \
    --volume /opt/gitlab/data:/home/git/data \
    sameersbn/gitlab:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;SMTP* 环境变量默认使用Gmail服务，你可以替换为你常用的邮箱，比如上边使用126邮箱
you_email,you_email_password 替换为你的邮箱和密码&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面的命令将使用10080作为Gitlab的Web访问端口，10022将作为ssh push和pull代码的端口。
在本地可以使用浏览器打开http://localhost:10080 
来访问Gitlab，初始登录网站使用root账户，用户名为&lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;，密码为：&lt;code class=&quot;highlighter-rouge&quot;&gt;5iveL!fe&lt;/code&gt;，登录后需要立即修改密码。&lt;/p&gt;

&lt;p&gt;这里解释一下各参数：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-d: 后台运行&lt;/li&gt;
  &lt;li&gt;-e：配置Gitlab运行的环境变量，这个参数很重要，具体有哪些环境变量，后面列举&lt;/li&gt;
  &lt;li&gt;-p: 端口转发规则&lt;/li&gt;
  &lt;li&gt;-v: 共享目录挂载，即docker容器内外数据共享&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gitlab的环境变量配置比较多，这里列举一下比较重要的Gitlab的环境变量：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GITLAB_HOST: 这个是Gitlab服务器的hostname，你需要将此设定为网站的域名或者ip（不带端口号），默认值为localhost，这个值会被Gitlab用来生成repo的链接，所以必须要设置。否则，在创建的repo中，会发现所有的repo链接都是以localhost为hostname。&lt;/li&gt;
  &lt;li&gt;GITLAB_PORT Gitlab网站的访问端口，这里的设置要结合端口转发一起设置，否则会导致网站无法访问，默认值为80&lt;/li&gt;
  &lt;li&gt;GITLAB_SSH_PORT Gitlab的SSH代码提交方式使用的SSH端口，这里的设置要结合端口转发一起设置，否则会导致代码无法提交，默认值为22。如果是在VPS上部署，这个值请使用别的端口，比如上面提到的10022端口，否则会与VPS原本的SSH端口产生冲突，造成SSH无法登录VPS&lt;/li&gt;
  &lt;li&gt;GITLAB_BACKUPS Gitlab的自动备份配置，有disable, daily, weekly, monthly四个可选值，默认为disable。建议打开自动备份&lt;/li&gt;
  &lt;li&gt;GITLAB_BACKUP_DIR Gitlab自动备份目录，默认值为/home/git/data/backups&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;详细参数设置请参考&lt;code class=&quot;highlighter-rouge&quot;&gt;参考资料1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;参考资料：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;1&lt;a href=&quot;https://hub.docker.com/r/sameersbn/gitlab/#available-configuration-parameters&quot;&gt;sameersbn/gitlab镜像文档&lt;/a&gt;
2&lt;a href=&quot;http://segmentfault.com/a/1190000002421271&quot;&gt;docker-gitlab部署&lt;/a&gt; 
3&lt;a href=&quot;http://www.tuicool.com/articles/bYbi2mJ&quot;&gt;GitLab搭建与维护&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Baojian</name></author><category term="技术" /><category term="Docker" /><summary type="html">Docker搭建Gitlab</summary></entry><entry><title type="html">使用Dockerfile创建镜像</title><link href="http://localhost:4000/2015/10/23/user-docker-file.html" rel="alternate" type="text/html" title="使用Dockerfile创建镜像" /><published>2015-10-23T23:25:12+08:00</published><updated>2015-10-23T23:25:12+08:00</updated><id>http://localhost:4000/2015/10/23/user-docker-file</id><content type="html" xml:base="http://localhost:4000/2015/10/23/user-docker-file.html">&lt;blockquote&gt;
  &lt;p&gt;创建镜像&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如何使用Dockerfile创建镜像？&lt;/p&gt;

&lt;p&gt;Dockerfile包含创建镜像所需要的全部指令。基于在Dockerfile中的指令，我们可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker build&lt;/code&gt;命令来创建镜像。通过减少镜像和容器的创建过程来简化部署。&lt;/p&gt;

&lt;p&gt;Dockerfile支持支持的语法命令如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INSTRUCTION argument
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;指令不区分大小写。但是，命名约定为全部大写。&lt;/p&gt;

&lt;p&gt;Tips:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INSTRUCTION argument,不要问我这是什么，我也不知道，看了官网定义，
大概理解为 `Dockerfile命令 参数`  这样的格式吧。。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!--more--&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ubuntu:14.04

## 设置作者信息
MAINTAINER	http://xinbaojian.xyz xinbaojian &amp;lt;xinbaojian@126.com&amp;gt;

# 使用阿里云镜像

# 备份原源列表
RUN mv /etc/apt/sources.list /etc/apt/sources.list.backup
# 替换阿里云源
ADD ./sources.list /etc/apt/sources.list

# 更新镜像源

RUN apt-get update

RUN apt-get upgrade -y

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在创建一个目录，并且创建一个 Dockerfile&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir baojian
cd baojian
touch Dockerfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;把上面的内容填充在Dockerfile中，sources.list 可以从这里下载 &lt;a href=&quot;https://github.com/widuu/Dockerfile/blob/master/sources.list&quot;&gt;sources.list&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果不想下载，可以进行如下操作&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd baojian
touch sources.list
#拷贝下边sources.list 的内容
vi sources.list
#按 i 进入编辑模式
ctrl + v 粘贴
:wq    # 保存并退出vi 编辑器
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;sources.list 内容&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;baojian/ 的目录结构如下&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
└── baojian
    ├── Dockerfile
    └── sources.list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在baojian 目录下执行如下命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build -t ubuntu:baojian .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们使用 docker build 命令并指定 -t 标识(flag)来标示属于 ubuntu ，镜像名称为 ubuntu,标签是 baojian&lt;/p&gt;

&lt;p&gt;我们可以使用新的镜像来创建容器：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -t -i ubuntu:baojian /bin/bash
root@8196968dac35:/#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：这里只是简单的介绍一下如何创建镜像。我们跳过了很多你可以使用的其它指令。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这就是一个以镜像 ubuntu:baojian 为基础镜像的 容器了，你可以在里面安装你想要的工具&lt;/p&gt;

&lt;p&gt;安装完成后你也可以使用如下命令，把它们提交进基础镜像里&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exit 退出容器
docker ps -l 查看刚才镜像的 CONTAINER ID
docker commit -m=&quot;added some software&quot; -a=&quot;baojian&quot; 7170ceab520d ubuntu:baojian
output:add5a99769283525e33e84d5158b82995d9a11d475a57d09727f06df2a1e71f8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里我们使用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker commit&lt;/code&gt; 命令。这里我们指定了两个标识(flags) &lt;code class=&quot;highlighter-rouge&quot;&gt;-m&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;-a&lt;/code&gt; 。&lt;code class=&quot;highlighter-rouge&quot;&gt;-m&lt;/code&gt; 标识我们指定提交的信息，就像你提交一个版本控制。&lt;code class=&quot;highlighter-rouge&quot;&gt;-a&lt;/code&gt; 标识允许对我们的更新来指定一个作者。&lt;/p&gt;

&lt;p&gt;我们也指定了想要创建的新镜像容器来源 (我们先前记录的ID) &lt;code class=&quot;highlighter-rouge&quot;&gt;7170ceab520d&lt;/code&gt; 和 我们指定要创建的目标镜像：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu:baojian&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;以后再以 &lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu:baojian&lt;/code&gt; 为基础镜像生成的 容器 ，就包含上边安装过的软件了。&lt;/p&gt;

&lt;p&gt;参考资料：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;1) &lt;a href=&quot;http://dockone.io/article/103&quot;&gt;Docker入门教程（三）Dockerfile&lt;/a&gt;
2) &lt;a href=&quot;http://docker.widuu.com/userguide/dockerimages.html&quot;&gt;使用 Docker 镜像&lt;/a&gt;
3) &lt;a href=&quot;https://github.com/widuu/Dockerfile&quot;&gt;widuu/Dockerfile&lt;/a&gt;
4) &lt;a href=&quot;http://blog.tankywoo.com/docker/2014/05/08/docker-2-dockerfile.html&quot;&gt;Docker 2 – 关于Dockerfile&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Baojian</name></author><category term="技术" /><category term="Docker" /><summary type="html">创建镜像</summary></entry></feed>